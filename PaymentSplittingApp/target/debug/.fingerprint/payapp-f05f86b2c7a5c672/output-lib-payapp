{"$message_type":"diagnostic","message":"unused import: `rand::Rng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ps.rs","byte_start":617,"byte_end":626,"line_start":22,"line_end":22,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/ps.rs","byte_start":613,"byte_end":627,"line_start":22,"line_end":22,"column_start":1,"column_end":15,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::Rng`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ps.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::Rng;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::sketch::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ps.rs","byte_start":709,"byte_end":725,"line_start":27,"line_end":27,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use crate::sketch::*;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/ps.rs","byte_start":705,"byte_end":726,"line_start":27,"line_end":27,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use crate::sketch::*;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::sketch::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ps.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::sketch::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::DPF_DOMAIN`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/ps.rs","byte_start":873,"byte_end":890,"line_start":34,"line_end":34,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use crate::DPF_DOMAIN;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/ps.rs","byte_start":869,"byte_end":891,"line_start":34,"line_end":34,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"use crate::DPF_DOMAIN;","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::DPF_DOMAIN`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ps.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::DPF_DOMAIN;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":1549,"byte_end":1557,"line_start":45,"line_end":45,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"        let x0tilde = Scalar::random(&mut rng);","highlight_start":38,"highlight_end":46}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":1534,"byte_end":1548,"line_start":45,"line_end":45,"column_start":23,"column_end":37,"is_primary":false,"text":[{"text":"        let x0tilde = Scalar::random(&mut rng);","highlight_start":23,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:45:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let x0tilde = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":1549,"byte_end":1557,"line_start":45,"line_end":45,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"        let x0tilde = Scalar::random(&mut rng);","highlight_start":38,"highlight_end":46}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":1534,"byte_end":1548,"line_start":45,"line_end":45,"column_start":23,"column_end":37,"is_primary":false,"text":[{"text":"        let x0tilde = Scalar::random(&mut rng);","highlight_start":23,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:45:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let x0tilde = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":1741,"byte_end":1749,"line_start":49,"line_end":49,"column_start":59,"column_end":67,"is_primary":true,"text":[{"text":"        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));","highlight_start":59,"highlight_end":67}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":1726,"byte_end":1740,"line_start":49,"line_end":49,"column_start":44,"column_end":58,"is_primary":false,"text":[{"text":"        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));","highlight_start":44,"highlight_end":58}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:49:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":1741,"byte_end":1749,"line_start":49,"line_end":49,"column_start":59,"column_end":67,"is_primary":true,"text":[{"text":"        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));","highlight_start":59,"highlight_end":67}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":1726,"byte_end":1740,"line_start":49,"line_end":49,"column_start":44,"column_end":58,"is_primary":false,"text":[{"text":"        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));","highlight_start":44,"highlight_end":58}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:49:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        x.resize_with((n + 1) as usize, || Scalar::random(&mut rng));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":6614,"byte_end":6622,"line_start":205,"line_end":205,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"        let d = Scalar::random(&mut rng);","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":6599,"byte_end":6613,"line_start":205,"line_end":205,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"        let d = Scalar::random(&mut rng);","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:205:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let d = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":6614,"byte_end":6622,"line_start":205,"line_end":205,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"        let d = Scalar::random(&mut rng);","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":6599,"byte_end":6613,"line_start":205,"line_end":205,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"        let d = Scalar::random(&mut rng);","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:205:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let d = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":6809,"byte_end":6817,"line_start":210,"line_end":210,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        let e1 = Scalar::random(&mut rng);","highlight_start":33,"highlight_end":41}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":6794,"byte_end":6808,"line_start":210,"line_end":210,"column_start":18,"column_end":32,"is_primary":false,"text":[{"text":"        let e1 = Scalar::random(&mut rng);","highlight_start":18,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:210:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let e1 = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":6809,"byte_end":6817,"line_start":210,"line_end":210,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        let e1 = Scalar::random(&mut rng);","highlight_start":33,"highlight_end":41}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":6794,"byte_end":6808,"line_start":210,"line_end":210,"column_start":18,"column_end":32,"is_primary":false,"text":[{"text":"        let e1 = Scalar::random(&mut rng);","highlight_start":18,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:210:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let e1 = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":8841,"byte_end":8849,"line_start":271,"line_end":271,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"            let b = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":8826,"byte_end":8840,"line_start":271,"line_end":271,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"            let b = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:271:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let b = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":8841,"byte_end":8849,"line_start":271,"line_end":271,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"            let b = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":8826,"byte_end":8840,"line_start":271,"line_end":271,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"            let b = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:271:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let b = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":9074,"byte_end":9082,"line_start":277,"line_end":277,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"            let s = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":9059,"byte_end":9073,"line_start":277,"line_end":277,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"            let s = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:277:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let s = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":9074,"byte_end":9082,"line_start":277,"line_end":277,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"            let s = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":9059,"byte_end":9073,"line_start":277,"line_end":277,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"            let s = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:277:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let s = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14023,"byte_end":14031,"line_start":433,"line_end":433,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"        let t = Scalar::random(&mut rng);","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14008,"byte_end":14022,"line_start":433,"line_end":433,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"        let t = Scalar::random(&mut rng);","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:433:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let t = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14023,"byte_end":14031,"line_start":433,"line_end":433,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"        let t = Scalar::random(&mut rng);","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14008,"byte_end":14022,"line_start":433,"line_end":433,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"        let t = Scalar::random(&mut rng);","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:433:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let t = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14186,"byte_end":14194,"line_start":438,"line_end":438,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        let z3 = Scalar::random(&mut rng);","highlight_start":33,"highlight_end":41}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14171,"byte_end":14185,"line_start":438,"line_end":438,"column_start":18,"column_end":32,"is_primary":false,"text":[{"text":"        let z3 = Scalar::random(&mut rng);","highlight_start":18,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:438:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let z3 = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14186,"byte_end":14194,"line_start":438,"line_end":438,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        let z3 = Scalar::random(&mut rng);","highlight_start":33,"highlight_end":41}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14171,"byte_end":14185,"line_start":438,"line_end":438,"column_start":18,"column_end":32,"is_primary":false,"text":[{"text":"        let z3 = Scalar::random(&mut rng);","highlight_start":18,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:438:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let z3 = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14501,"byte_end":14509,"line_start":445,"line_end":445,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"        let negzQ = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14486,"byte_end":14500,"line_start":445,"line_end":445,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"        let negzQ = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:445:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let negzQ = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ggm.rs","byte_start":14501,"byte_end":14509,"line_start":445,"line_end":445,"column_start":36,"column_end":44,"is_primary":true,"text":[{"text":"        let negzQ = Scalar::random(&mut rng);","highlight_start":36,"highlight_end":44}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ggm.rs","byte_start":14486,"byte_end":14500,"line_start":445,"line_end":445,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"        let negzQ = Scalar::random(&mut rng);","highlight_start":21,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ggm.rs:445:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let negzQ = Scalar::random(&mut rng);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ps.rs","byte_start":7009,"byte_end":7017,"line_start":219,"line_end":219,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"\t\t\tgp_uids.push(Scalar::random(&mut rng));","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ps.rs","byte_start":6994,"byte_end":7008,"line_start":219,"line_end":219,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"\t\t\tgp_uids.push(Scalar::random(&mut rng));","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::RngCore`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_core::block::BlockRng64<R>\n  rand_chacha::chacha::ChaCha8Rng\n  zkp::rand::rngs::OsRng\n  Box<R>\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17170,"byte_end":17177,"line_start":558,"line_end":558,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":22,"highlight_end":29}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::RngCore` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ps.rs:219:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            gp_uids.push(Scalar::random(&mut rng));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::RngCore` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::RngCore`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_core::block::BlockRng64<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m              zkp::rand::rngs::OsRng\u001b[0m\n\u001b[0m              Box<R>\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ps.rs","byte_start":7009,"byte_end":7017,"line_start":219,"line_end":219,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"\t\t\tgp_uids.push(Scalar::random(&mut rng));","highlight_start":32,"highlight_end":40}],"label":"the trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/ps.rs","byte_start":6994,"byte_end":7008,"line_start":219,"line_end":219,"column_start":17,"column_end":31,"is_primary":false,"text":[{"text":"\t\t\tgp_uids.push(Scalar::random(&mut rng));","highlight_start":17,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zkp::rand::CryptoRng`:\n  TranscriptRng\n  rand_chacha::chacha::ChaCha20Core\n  rand_chacha::chacha::ChaCha20Rng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_core::block::BlockRng<R>\n  rand_chacha::chacha::ChaCha8Core\n  rand_chacha::chacha::ChaCha8Rng\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Scalar::random`","code":null,"level":"note","spans":[{"file_name":"/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs","byte_start":17180,"byte_end":17189,"line_start":558,"line_end":558,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {","highlight_start":32,"highlight_end":41}],"label":"required by this bound in `Scalar::random`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rand::prelude::ThreadRng: zkp::rand::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ps.rs:219:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            gp_uids.push(Scalar::random(&mut rng));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zkp::rand::CryptoRng` is not implemented for `rand::prelude::ThreadRng`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zkp::rand::CryptoRng`:\u001b[0m\n\u001b[0m              TranscriptRng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha20Rng\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m              rand_core::block::BlockRng<R>\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Core\u001b[0m\n\u001b[0m              rand_chacha::chacha::ChaCha8Rng\u001b[0m\n\u001b[0m            and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Scalar::random`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maggie/.cargo/registry/src/index.crates.io-6f17d22bba15001f/curve25519-dalek-ng-3.0.3/src/scalar.rs:558:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn random<R: RngCore + CryptoRng>(rng: &mut R) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scalar::random`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `NewMac`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/coms.rs","byte_start":433,"byte_end":439,"line_start":12,"line_end":12,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"use hmac::{Hmac, Mac, NewMac};","highlight_start":23,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `NewMac`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/coms.rs:12:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse hmac::{Hmac, Mac, NewMac};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 20 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 20 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
